#!/usr/bin/env python
import sys
import re
import struct
from binascii import hexlify

def int_log2(n):
	i = -1
	while n != 0:
		n >>= 1
		i += 1
	return i

def struct_unpack_format(n_bytes, signed=False, endian='>'):
	formats = ['B', 'H', 'I', 'Q']
	fmt = formats[int_log2(n_bytes)]

	if signed:
		fmt = fmt.lower()

	return endian + fmt

def struct_unpack(bytearr, signed=False, endian='>'):
	fmt = struct_unpack_format(len(bytearr), signed=signed, endian=endian)
	return struct.unpack(fmt, bytearr)[0]

class ArgType:
	def __init__(self, size, name=None, signed=False, endian='>', hex_format=False, comment=None):
		self.size = size
		self.name = name
		self.signed = signed
		self.endian = endian
		self.comment = comment
		self.hex_format = hex_format

	def get_size(self, prefixes):
		if type(self.size) == int:
			return self.size
		else:
			return self.size(prefixes)

	def value_with_bytes(self, bytearr, prefixes, offset):
		size = self.get_size(prefixes)
		return [struct_unpack(bytearr[offset:offset + size], signed=self.signed, endian=self.endian)]

	def representation_with_bytes(self, bytearr, prefixes, offset):
		value = self.value_with_bytes(bytearr, prefixes, offset)[0]
		return hex(value) if self.hex_format else str(value)

	def comment_with_bytes(self, bytearr, prefixes, offset):
		value = self.value_with_bytes(bytearr, prefixes, offset)[0]
		return self.comment(offset, value) if self.comment else ''

class CompositeArgType:
	def __init__(self, sub_args, name=None):
		self.sub_args = sub_args
		self.name = name

	def __nonzero__(self):
		return len(self.sub_args) > 0

	def get_size(self, prefixes):
		return sum(map(lambda a: a.get_size(prefixes), self.sub_args))

	def value_with_bytes(self, bytearr, prefixes, offset):
		return map(lambda a: a.value_with_byte(bytearr, prefixes, offset), self.sub_args)

	def representation_with_bytes(self, bytearr, prefixes, offset):
		arg_reps = []
		for arg in self.sub_args:
			arg_reps.append(arg.representation_with_bytes(bytearr, prefixes, offset))
			offset += arg.get_size(prefixes)

		return ', '.join(arg_reps)

	def comment_with_bytes(self, bytearr, prefixes, offset):
		return ', '.join(filter(lambda x: x, map(lambda a: a.comment_with_bytes(bytearr, prefixes, offset), self.sub_args)))

class Instruction:
	ins_prefixes = {
		0xc4: 'wide'
	}

	ops = {
		0x00: ('nop',           'no_args'),
		0x10: ('bipush',        'byte_exp'),
		0x13: ('ldc_w',         'const_exp'),
		0x15: ('iload',         'varnum_exp'),
		0x36: ('istore',        'varnum_exp'),
		0x57: ('pop',           'no_args'),
		0x59: ('dup',           'no_args'),
		0x5f: ('swap',          'no_args'),
		0x60: ('iadd',          'no_args'),
		0x64: ('isub',          'no_args'),
		0x7e: ('iand',          'no_args'),
		0x80: ('ior',           'no_args'),
		0x84: ('iinc',          'iinc_args'),
		0x99: ('ifeq',          'label'),
		0x9b: ('iflt',          'label'),
		0x9f: ('if_icmpeq',     'label'),
		0xa7: ('goto',          'label'),
		0xac: ('ireturn',       'no_args'),
		0xb6: ('invokevirtual', 'method')
	}

	def __init__(self, parser, address):
		self.arg_types = {
			'byte_exp':   ArgType(0x01, name='byte_exp', signed=True),
			'label':      ArgType(0x02, name='label', signed=True, hex_format=True, comment=lambda offset, value: 'address: ' + hex(offset + value - 1)),
			'const_exp':  ArgType(0x02, name='const_exp', comment=self.const_comment),
			'method':     ArgType(0x02, name='method', comment=self.method_comment),
			'varnum_exp': ArgType(lambda prefixes: 0x02 if 'wide' in prefixes else 0x01, name='varnum_exp'),

			'no_args': CompositeArgType([], name='no_args'),
		}
		# iinc really takes a varnum_exp, but it can't be wide,
		# so it is exactly the same as byte_exp
		self.arg_types['iinc_args'] = CompositeArgType([self.arg_types['byte_exp']] * 2, name='iinc_args')

		self.parser = parser
		self.address = address

		self.prefixes = []
		i = address
		while parser.bytearr[i] in self.ins_prefixes:
			self.prefixes.append(self.ins_prefixes[parser.bytearr[i]])
			i += 1

		self.op = parser.bytearr[i]
		if not self.op in self.ops:
			raise Exception('Unknown opcode: 0x{:x}'.format(op))

		self.mnemonic, arg_type_name = self.ops[self.op]
		self.arg_type = self.arg_types[arg_type_name]

		self.arg_offset = len(self.prefixes) + 1
		self.size = self.arg_offset + self.arg_type.get_size(self.prefixes)

	def const_value(self, value):
		if 0 <= value < len(self.parser.consts):
			return self.parser.consts[value]
		else:
			return None

	def const_comment(self, offset, value):
		loc_val = self.const_value(value)
		if loc_val:
			return 'const value: ' + hex(loc_val)
		else:
			return 'unknown const'

	def method_comment(self, offset, value):
		special_labels = {
			0x8001: 'putchar',
			0x8000: 'getchar'
		}

		if value in special_labels:
			return 'special method: ' + special_labels[value]

		loc_val = self.const_value(value)
		if loc_val is not None:
			return 'method location: ' + hex(loc_val)
		else:
			return 'unknown const'

	def get_arg_values(self):
		return self.arg_type.value_with_bytes(self.parser.bytearr, self.prefixes, self.address + self.arg_offset)

	def get_hex_str(self):
		hexstr = hexlify(self.parser.bytearr[self.address:self.address + self.size])
		return re.sub(r'([0-9a-f]{2})', r'\1 ', hexstr).strip()

	def get_prefix_str(self):
		return ' '.join(self.prefixes) + ' ' if self.prefixes else ''

	def get_ins_str(self):
		return '{}{}{}'.format(
			self.get_prefix_str(),
			self.mnemonic,
			' ' + self.arg_type.representation_with_bytes(self.parser.bytearr, self.prefixes, self.address + self.arg_offset) if self.arg_type else ''
		)

	def get_comment_str(self):
		comment = self.arg_type.comment_with_bytes(self.parser.bytearr, self.prefixes, self.address + self.arg_offset)
		if comment:
			return ' ; ' + comment
		else:
			return ''

	def __repr__(self):
		return '{:0{}x}:  {:<{}}  {:<{}}{}'.format(
			self.address,       self.parser.max_address_width,
			self.get_hex_str(), self.parser.max_hex_width,
			self.get_ins_str(), self.parser.max_ins_width,
			self.get_comment_str()
		)

class Method:
	def __init__(self, parser, address):
		self.parser = parser
		self.address = address

		self.args = parser.bytearr[address] * 256 + parser.bytearr[address + 1]
		self.locals = parser.bytearr[address + 2] * 256 + parser.bytearr[address + 3]

	def get_name(self):
		if self.address in self.parser.consts:
			index = self.parser.consts.index(self.address)
			if index == self.parser.main_index:
				return 'main (const_{})'.format(index)
			else:
				return 'const_{}'.format(index)
		else:
			return None

	def __repr__(self):
		name = self.get_name()
		name_str = ' - ' + name if name else ''
		return '\n; 0x{:x}{}\n; args: {}, locals: {}'.format(
			self.address,
			name_str,
			self.args,
			self.locals
		)

class Label:
	def __init__(self, address):
		self.address = address

	def __repr__(self):
		return '\n; Label: loc_0x{:x}'.format(self.address)


class IJVM_bc_parser:
	def __init__(self, file_contents):
		self.max_hex_width = 0
		self.max_ins_width = 0

		match = re.search(r'^main index: (.*)\nmethod area:.*\n((?:.|\n)*)\nconstant pool:.*\n((?:.|\n)*)$', file_contents)
		if not match:
			raise Exception('Failed to parse bc file!')

		main_index_string, hexstring, constsstring = match.groups()
		hexpairs = map(lambda x: int(x, 16), hexstring.replace('\n', ' ').strip().split(' '))
		self.bytearr = bytearray(hexpairs)

		self.consts = map(lambda x: int(x, 16), constsstring.strip().split('\n'))
		self.main_index = int(main_index_string)

		self.max_address_width = int_log2(len(hexpairs)) / 4 + 1

		self.methods_and_ins = []
		self.labels = {}

		i = 0
		while i < len(hexpairs):
			# FIXME: Assumes a method has less than 256 arguments
			if i in self.consts and hexpairs[i] == 0x00:
				self.methods_and_ins.append(Method(self, i))
				i += 4
			else:
				ins = Instruction(self, i)

				hex_width = len(ins.get_hex_str())
				ins_width = len(ins.get_ins_str())
				self.max_hex_width = max(hex_width, self.max_hex_width)
				self.max_ins_width = max(ins_width, self.max_ins_width)

				self.methods_and_ins.append(ins)
				if ins.arg_type.name == 'label':
					label_address = i + ins.get_arg_values()[0]
					self.labels[label_address] = Label(label_address)

				i += ins.size

	def get_output(self):
		header = '; ' + '=' * 20

		output = header + '\n; Method area:'
		for method_or_ins in self.methods_and_ins:
			address = method_or_ins.address
			if address in self.labels:
				output += '{}\n'.format(self.labels[address])

			output += '{}\n'.format(method_or_ins)

		output += '\n' + header + '\n; Constant area:\n'
		for i, c in enumerate(self.consts):
			output += '{}: {:08x}\n'.format(i, c)

		return output

def main(argv):
	if len(sys.argv) < 2:
		print 'Usage: {} bc-file [bc-file2 ...]'.format(sys.argv[0])
		return 1

	multiple = len(sys.argv) > 2

	first = True
	for fname in sys.argv[1:]:
		if multiple:
			print '{}{}:'.format('' if first else '\n', fname)
			first = False

		if fname == '-':
			f = sys.stdin
		else:
			f = open(fname, 'r')

		contents = f.read()
		f.close()

		parser = IJVM_bc_parser(contents)

		print parser.get_output(),

	return 0

if __name__ == '__main__':
	sys.exit(main(sys.argv))
