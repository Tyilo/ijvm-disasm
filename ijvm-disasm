#!/usr/bin/env python
import sys
import re
import math
import struct

struct_formats = [None, 'B', 'H', None, 'I', None, None, None, 'Q']

if len(sys.argv) != 2:
	print 'Usage: {} bc-file'.format(sys.argv[0])
	sys.exit(1)

with open(sys.argv[1]) as f:
    contents = f.read()

match = re.search(r'^main index: (.*)\nmethod area:.*\n((?:.|\n)*)\nconstant pool:.*\n((?:.|\n)*)$', contents)
if not match:
	print 'Failed to parse bc file!'
	sys.exit(1)

main_index_string, hexstring, constsstring = match.groups()
hexpairs = map(lambda x: int(x, 16), hexstring.replace('\n', ' ').strip().split(' '))

consts = map(lambda x: int(x, 16), constsstring.strip().split('\n'))
main_index = int(main_index_string)

no_args = [0x00]
byte_exp = [0x01]
label = [0x02]
const_exp = [0x02]
method = [0x02]
varnum_exp = [0x01]

ops = [
	(0x00, 'nop',           no_args),
	(0x10, 'bipush',        byte_exp),
	(0x13, 'ldc_w',         const_exp),
	(0x15, 'iload',         varnum_exp),
	(0x36, 'istore',        varnum_exp),
	(0x57, 'pop',           no_args),
	(0x59, 'dup',           no_args),
	(0x5f, 'swap',          no_args),
	(0x60, 'iadd',          no_args),
	(0x64, 'isub',          no_args),
	(0x7e, 'iand',          no_args),
	(0x80, 'ior',           no_args),
	(0x84, 'iinc',          [byte_exp, byte_exp]), # really takes a varnum_exp, but it can't be wide
	(0x99, 'ifeq',          label),
	(0x9b, 'iflt',          label),
	(0x9f, 'if_icmpeq',     label),
	(0xa7, 'goto',          label),
	(0xac, 'ireturn',       no_args),
	(0xb6, 'invokevirtual', method)
]

max_address_width = int(math.log(len(hexpairs), 16)) + 1
max_opcode_width = 3 * 3 -1
max_instruction_width = len('invokevirtual 655365')

print '; Method area:'

i = 0
while i < len(hexpairs):
	if i in consts and hexpairs[i] == 0x00:
		args = hexpairs[i] * 256 + hexpairs[i + 1]
		_locals = hexpairs[i + 2] * 256 + hexpairs[i + 3]
		print '\n; {}{}\n; args: {}, locals: {}'.format(
			hex(i),
			' (main)' if i == main_index else '',
			args,
		_locals)
		i += 4
	else:
		prefix = ''
		address = i
		wide = False
		while hexpairs[i] == 0xc4:
			prefix += 'wide '
			wide = True
			i += 1

		res = filter(lambda x: x[0] == hexpairs[i], ops)
		if len(res) == 0:
			print 'Failed to decode instruction at address {}'.format(i)
			sys.exit(1)

		i += 1

		opcode, mnemonic, args = res[0]
		if type(args[0]) != list:
			args = [args]
		args_size = sum(map(lambda x: x[0], args))
		if wide:
			varnum_exps = sum(map(lambda x: int(x is varnum_exp), args))
			args_size += varnum_exps

		instruction = prefix + mnemonic

		res = '{}:  {}'.format(
			hex(address).replace('0x', '').zfill(max_address_width),
			' '.join(map(lambda x: hex(x).replace('0x', '').zfill(2), hexpairs[address:i + args_size])).ljust(max_opcode_width),
		)
		if args_size != 0:
			arg_values = []
			comments = []
			for a in args:
				size = a[0]
				arg_list = hexpairs[i:i + size]
				comment = None

				fmt = struct_formats[len(arg_list)]
				signed_arg = a is byte_exp or a is label
				if signed_arg:
					fmt = fmt.lower()

				arg = struct.unpack(">" + fmt, bytearray(arg_list))[0]

				if mnemonic == 'invokevirtual':
					comment = 'method location: '
					if arg == 0x8001:
						comment += 'putchar'
					elif arg == 0x8000:
						comment += 'getchar'
					elif 0 <= arg < len(consts):
						comment += hex(consts[arg])
					else:
						comment = 'unknown const'
				elif a is const_exp:
					if 0 <= arg < len(consts):
						comment = 'const value: ' + hex(consts[arg])
					else:
						comment = 'unknown const'
				elif a is label:
					comment = 'location: ' + hex(address + arg)

				arg_values.append(str(arg))
				if comment:
					comments.append(comment)

				i += size

			instruction += ' ' + ', '.join(arg_values)
			res += '  {}{}'.format(
				instruction.ljust(max_instruction_width),
				'' if not comments else ' ; ' + ', '.join(comments)
			)

		print res

print '\n; Constant area:'
for i, c in enumerate(consts):
	print '{}: {}'.format(i, hex(c).replace('0x', '').zfill(8))
